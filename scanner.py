import sys
import socket
import threading
from datetime import datetime 

def get_port_range():
    if len(sys.argv) >= 4:
        start_port = int(sys.argv[2])
        end_port = int(sys.argv[3])
    else:
        start_port = 50
        end_port = 85
    return start_port, end_port

def detect_service(port):
    try:
        s = socket.socket()
        s.connect((target, port))
        s.send(b'HEAD / HTTP/1.1\r\n\r\n')
        banner = s.recv(1024).decode().strip()
        return banner
    except:
        return "Unknown service"

def scan_port(port, verbose=False):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(1)
        result = s.connect_ex((target, port))
        if result == 0:
            service = detect_service(port)
            print(f"Port {port} is open ({service})")
            open_ports.append(port)
            log_results(log_file, f"Port {port} is open ({service})")
        elif verbose:
            print(f"Port {port} is closed")

def scan_port_thread(port):
    scan_port(port)

def scan_ports_concurrently(start_port, end_port):
    threads = []
    for port in range(start_port, end_port + 1):
        thread = threading.Thread(target=scan_port_thread, args=(port,))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

def log_results(log_file, message):
    with open(log_file, "a") as f:
        f.write(message + "\n")

def print_summary():
    print("-" * 50)
    print(f"Scan completed at: {str(datetime.now())}")
    print(f"Total open ports: {len(open_ports)}")
    print("Open ports: " + ", ".join(str(port) for port in open_ports))
    print("-" * 50)

# Main script logic
if len(sys.argv) >= 2:
    target = socket.gethostbyname(sys.argv[1])
    start_port, end_port = get_port_range()
else:
    print("Invalid arguments")
    print(">>Usage python3 {} <ip address> <start port> <end port>".format(sys.argv[0]))
    sys.exit(1)

print("-" * 50)
print("Scanning target " + target)
print("Time started: " + str(datetime.now()))
print("-" * 50)

log_file = "scan_results.txt"
open_ports = []

try:
    scan_ports_concurrently(start_port, end_port)
    print_summary()
except KeyboardInterrupt:
    print("\n\nExiting...")
    sys.exit()
except socket.gaierror:
    print("Hostname could not be resolved")
    sys.exit()
except socket.error:
    print("Could not connect")
    sys.exit()
